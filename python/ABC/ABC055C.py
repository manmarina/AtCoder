S, C = map(int, input().split())

ans = 0

# Sのピース分のSccを作成
if C >= S * 2:  # cのピースが十分にある
    C -= S * 2
    ans += S
    S = 0

else:  # cのピースが少ない
    S -= C // 2
    ans += C // 2
    C = C % 2

# cのピースがまだ余っていたらSccを作成
if C >= 4:
    ans += C // 4
    C = C % 4

# print("S =", S)
# print("c =", C)
print(ans)

"""
貪欲法
自力解

コアの観察（貪欲＋ケース分け）
    まず手元の S を優先的に使うのが最適。なぜなら、c から S を作ると 追加で c を 2 個消費するから。
    S を使い切るまでに必要な c は 1 組あたり 2 個、つまり最大で min(N, M//2) 組は確実に作れる。
    その後、S が足りない（または 0）の状態で、c だけで作る Scc を考えると
    1 組に必要な c は
        S を作るのに 2 個
        組に必要な c が 2 個
        合計 4 個。
    よって残りの c からは (残りの c)//4 組作れる。
以上より、ケース分けで一発です：

この問題は数式整理と貪欲の良い練習です。
Proof もシンプルで、S を後から c で作るのは常に c を余計に食うため、
最初に手持ち S を使い切る戦略が最適になります。
"""
