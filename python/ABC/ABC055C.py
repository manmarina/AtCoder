N, M = map(int, input().split())

if M >= 2 * N:  # cが十分
    ans = N + (M - 2 * N) // 4
else:  # cが不足
    ans = M // 2

print(ans)

"""
もし M >= 2N（c が十分）：
まず N 組作る（S を使い切る、c を 2N 消費）。
残り c は M - 2N なので、さらに (M - 2N)//4 組。
答え = N + (M - 2N)//4

それ以外（c が不足）：
c がボトルネックなので 答え = M//2
"""

"""
貪欲法
チャッピー

コアの観察（貪欲＋ケース分け）
    まず手元の S を優先的に使うのが最適。なぜなら、c から S を作ると 追加で c を 2 個消費するから。
    S を使い切るまでに必要な c は 1 組あたり 2 個、つまり最大で min(N, M//2) 組は確実に作れる。
    その後、S が足りない（または 0）の状態で、c だけで作る Scc を考えると
    1 組に必要な c は
        S を作るのに 2 個
        組に必要な c が 2 個
        合計 4 個。
    よって残りの c からは (残りの c)//4 組作れる。
以上より、ケース分けで一発です：

この問題は数式整理と貪欲の良い練習です。
Proof もシンプルで、S を後から c で作るのは常に c を余計に食うため、
最初に手持ち S を使い切る戦略が最適になります。
"""
